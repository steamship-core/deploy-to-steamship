name: Deploy to Steamship
description: Deploys a Steamship app or plugin.

inputs:
  steamship_key:  # id of input
    description: 'Steamship API Key'
    required: true
  steamship_api_base:  # id of input
    description: 'Steamship API Base'
    required: false
    default: 'https://api.steamship.com/api/v1/'
  steamship_slack_notification_webhook:  # id of input
    description: 'Steamship Slack Notification Webhook'
    required: false
    default: ''
  test_before_deployment:
    description: 'Test before deployment? Set to "true" to enable.'
    required: false
    default: "false"
  entry_point:
    description: 'Directory containing code and steamship.json, relative to repository root.'
    required: false
    default: '.'

runs:
  using: "composite"
  steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Install Virtualenv
      shell: bash
      run: |
        cd ${{ inputs.entry_point }} && python3 -m venv .venv
    - name: Activate Virtualenv
      shell: bash
      run: |
        cd ${{ inputs.entry_point }} && source .venv/bin/activate
    - name: Install Dependencies
      shell: bash
      run: |
        cd ${{ inputs.entry_point }} && python -m pip install -r requirements.txt
    - name: Install Development Dependencies
      shell: bash
      run: |
        cd ${{ inputs.entry_point }} && python -m pip install -r requirements.dev.txt
    - name: Run test suite
      shell: bash
      if: ${{ ( inputs.test_before_deployment == 'true' ) }}
      run: |
        cd ${{ inputs.entry_point }} && pytest
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: "14"
    - name: Install Steamship CLI
      shell: bash
      run: cd ${{ inputs.entry_point }} && npm install -g @steamship/cli

    # Sanity Check:
    #   If the STEAMSHIP_API_KEY variable isn't present, the output of this step will help debug that.
    - name: Require Steamship API Key
      if: ${{ (!(inputs.steamship_key)) }}
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed("The required `steamship_key` action input was missing.")

    # Sanity Check:
    #   If the STEAMSHIP_API_BASE variable isn't present, the output of this step will help debug that.
    - name: Require Steamship API Base
      if: ${{ (!(inputs.steamship_api_base)) }}
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed("The required `steamship_api_base` action input was missing.")

    # Debug Check:
    #   Run the `ship user:info` command to log output in GitHub actions that may be helpful debugging a problem.
    - name: Test Steamship Authentication
      shell: bash
      run: cd ${{ inputs.entry_point }} && ship user:info
      env:
        STEAMSHIP_API_KEY: ${{ inputs.steamship_key }}
        STEAMSHIP_API_BASE: ${{ inputs.steamship_api_base }}

    - name: install strip-ansi-cli
      run: |
        if [ -z "${{ inputs.contains }}" ]; then
            cd ${{ inputs.entry_point }} && npm install --global strip-ansi-cli
        fi
      shell: bash

    - name: Pipe Steamship auth test to output file
      run: |
        cd ${{ inputs.entry_point }} && ship user:info &> user_info.txt || true
      shell: bash
      env:
        STEAMSHIP_API_KEY: ${{ inputs.steamship_key }}
        STEAMSHIP_API_BASE: ${{ inputs.steamship_api_base }}

    - name: Check Steamship auth test for pass
      id: check_steamship_auth_for_pass
      run: |
        cd ${{ inputs.entry_point }} && 
        if grep -q "Handle:" user_info.txt; then
            result=$(echo "PASSED")
        else
            result=$(echo "FAILED")
        fi
        echo "::set-output name=result::$(echo $result)"
      shell: bash

    # Sanity Check:
    #   Require PKG_VERSION
    - name: Require Package Version
      if: ${{ (steps.check_steamship_auth_for_pass.outputs.result == 'FAILED') }}
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed("Steamship authentication failed. Unable to continue deployment.")

    - name: Check Tag Versions
      shell: bash
      id: versions
      run: |
        cd ${{ inputs.entry_point }} && 
        TAG_VERSION=${GITHUB_REF/refs\/tags\/v/}
        PKG_VERSION=`ship project:get version`
        echo "::set-output name=TAG::$TAG_VERSION"
        echo "::set-output name=PKG::$PKG_VERSION"

    # Sanity Check:
    #   Require PKG_VERSION
    - name: Require Package Version
      if: ${{ (!(steps.versions.outputs.PKG)) }}
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed("Missing a `version` field in `steamship.json` file.")

    # Sanity Check:
    #   If the user is deploying to a branch tagged vX.Y.Z, then the branch version X.Y.Z must match the steamship.json version.
    - name: Fail if the tags aren't equal
      if: ${{ ( (!(steps.versions.outputs.TAG == 'refs/heads/staging')) && (!(steps.versions.outputs.TAG == 'refs/heads/main')) && (!(steps.versions.outputs.TAG == steps.versions.outputs.PKG)) ) }}
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed("Deployments to a branch tagged vX.Y.Z must have a matching X.Y.Z version in steamship.json. Branch version (${{ steps.versions.outputs.TAG }}) and the steamship.json version (${{ steps.versions.outputs.PKG }}) are different.")

    # Deploy the package
    - name: Deploy Package
      shell: bash
      run: |
        cd ${{ inputs.entry_point }} && 
        ship deploy &> deployment-results.txt || true
      env:
        STEAMSHIP_API_KEY: ${{ inputs.steamship_key }}
        STEAMSHIP_API_BASE: ${{ inputs.steamship_api_base }}

    - name: Upload Deployment Results
      uses: actions/upload-artifact@v3
      with:
        name: deployment-results
        path: ${{ inputs.entry_point }}/deployment-results.txt

    - name: Check Steamship deployment for pass
      id: check_steamship_deployment_for_pass
      run: |
        if grep -q "Deployed new" ${{ inputs.entry_point }}/deployment-results.txt; then
            result=$(echo "PASSED")
        else
            result=$(echo "FAILED")
            echo "Failed, contents of deployment-results.txt:"
            cat ${{ inputs.entry_point }}/deployment-results.txt
            echo "EOF (deployment-results.txt)"
        fi
        echo "::set-output name=result::$(echo $result)"
      shell: bash

    - name: Require Passing Deployment
      if: ${{ (steps.check_steamship_deployment_for_pass.outputs.result == 'FAILED') }}
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed("Steamship deployment failed. Unable to continue deployment. Please see attached deployment-results artifact for logging output.")

    - name: Check if should send Slack notification
      id: should_send_slack_notification
      run: |
         if [[ "${{ inputs.steamship_slack_notification_webhook }}" != "" ]];
         then
           echo "Found a Slack Webhook URL on steamship_slack_notification_webhook input"
           echo "::set-output name=send::YES"
         else
           echo "No slack webhook URL set on steamship_slack_notification_webhook input"
           echo "::set-output name=send::NO"
         fi
      shell: bash

    - name: Send notification to Slack
      id: slack
      if: ${{ (steps.should_send_slack_notification.outputs.send == 'YES') }}
      uses: slackapi/slack-github-action@v1.18.0
      with:
        # For posting a rich message using Block Kit
        payload: |
          {
            "text": "ðŸš¢ Automated ${{ steps.package_type.outputs.TPE }} Deployment ${{ steps.check_steamship_deployment_for_pass.outputs.result }} ðŸš¢ \n Endpoint: ${{ inputs.steamship_api_base }} \n Commit: ${{ github.event.pull_request.html_url || github.event.head_commit.url }} \n Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.steamship_slack_notification_webhook }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK


branding:
    icon: 'upload-cloud'
    color: 'green'
